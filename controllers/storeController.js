const mongoose = require('mongoose');
const Store = mongoose.model('Store');
const User = mongoose.model('User');
const multer = require('multer');
const jimp = require('jimp');
const uuid = require('uuid');

const multerOptions = {
	storage: multer.memoryStorage(),
	fileFilter(req, file, next) {
		const isPhoto = file.mimetype.startsWith('image/');
		if(isPhoto) {
			next(null, true);
		} else {
			next({ message: 'That filetype isn\'t allowed!'}, false);
		}
	}
};

exports.homePage = (req, res) => {
	res.render('index');
};

exports.addStore = (req, res) => {
	res.render('editStore', { title: 'Add Store'});
};

exports.upload = multer(multerOptions).single('photo');

exports.resize = async (req, res, next) => {
	// check if there is no new file to resize
	if(!req.file) {
		next();
		return;
	}
	const extension = req.file.mimetype.split('/')[1];
	req.body.photo = `${uuid.v4()}.${extension}`;
	// resize
	const photo = await jimp.read(req.file.buffer);
	await photo.resize(800, jimp.AUTO);
	// save
	await photo.write(`./public/uploads/${req.body.photo}`);

	// next middleware
	next();
};

exports.createStore = async (req, res) => {
	req.body.author = req.user._id;
	// awaiting .save() before assigning to the variable gives us access to store.slug
	// which is generated by our pre save hook on the Store model.
	const store = await (new Store(req.body)).save();
	req.flash('success', `Successfully created <strong>${store.name}</strong>.`);
	res.redirect(`/stores/${store.slug}`);
};

exports.getStores = async (req, res) => {
	const page = req.params.page || 1;
	const limit = 6;
	const skip = (page * limit) - limit;
	// Query the database for a list of all stores
	const storesPromise =  Store
		.find()
		.skip(skip)
		.limit(limit)
		.sort({ created: 'desc'});

	const countPromise = Store.count();

	const [stores, count] = await Promise.all([storesPromise, countPromise]);
	const pages = Math.ceil(count / limit);
	if(!stores.length && skip) {
		req.flash('info', `The page you asked for (${page}) doesn't exist. I redirected you to the last page.`);
		res.redirect(`/stores/page/${pages}`);
		return;
	}
	// stores.pug is also used by /hearts, which doesn't have pagination, so pagination variable is needed.
	res.render('stores', {title: 'Stores', stores, count, page, pages, pagination: true})
};

exports.getStore = async (req, res, next) => {
	// Find store by id
	const store = await Store.findOne({ slug: req.params.slug}).populate('author reviews');
	// Stop function and move on to error handler if store is null
	if(!store) return next();
	// Render store
	res.render('store', {title: store.name, store});
};

const confirmOwner = (store, user) => {
	if(!store.author.equals(user._id)) {
		throw Error('You must own a store in order to edit it.')
	}
};

exports.editStore = async (req, res) => {
	// Find the store by id
	const store = await Store.findOne({_id: req.params.id});
	// Confirm user is owner of the store
	confirmOwner(store, req.user);
	// Render the edit form
	res.render('editStore', { title: `Edit ${store.name}`, store })
};

exports.updateStore = async (req, res) => {
	// set the location data to type 'Point'
	req.body.location.type = 'Point';
	// Find and update the store
	const store = await Store.findOneAndUpdate(
		{ _id: req.params.id },
		req.body,
		{
			new: true, // return the new store, instead of the old one
			runValidators: true,
		}
	).exec();
	// flash success message
	req.flash('success', `Successfully updated <strong>${store.name}</strong>. <a href="/stores/${store.slug}">View Store </a>`);
	// Redirect to store
	res.redirect(`/stores/${store._id}/edit`);
};

exports.getStoresByTag = async (req, res) => {
	const tag = req.params.tag;
	const tagsPromise = Store.getTagsList();
	const tagQuery = tag || { $exists: true };
	const storesPromise = Store.find({ tags: tagQuery});
	const [tags, stores] = await Promise.all([tagsPromise, storesPromise]);
	res.render('tag', {title: 'Tags', tags, tag, stores});
};

exports.searchStores = async (req, res) => {
	const stores = await Store
		.find({
		$text: {
			$search: req.query.q
		}
	}, {
		score: { $meta: 'textScore' }
	})
		.sort({
		score: { $meta: 'textScore' }
	})
		.limit(5);
	res.json(stores);
};

exports.mapStores = async (req, res) => {
	const coordinates = [req.query.lng, req.query.lat].map(parseFloat);
	const q = {
		location: {
			$near: {
				$geometry: {
					type: 'Point',
					coordinates
				},
				$maxDistance: 10000 // 10km
			}
		}
	};
	const stores = await Store
		.find(q, {
			slug: 1,
			name: 1,
			description: 1,
			location: 1,
			photo: 1
		})
		.limit(10);
	res.json(stores);
};

exports.mapPage = (req, res) => {
	res.render('map', {title: 'Map'})
};

exports.heartStore = async (req, res) => {
	const hearts = req.user.hearts.map(obj => obj.toString());
	const operator = hearts.includes(req.params.id) ? '$pull' : '$addToSet';
	const user = await User.findByIdAndUpdate(req.user._id,
		{ [operator]: { hearts: req.params.id }},
		{ new: true }
	);
	res.json(user);
};

exports.hearts = async (req, res) => {
	const stores = await Store.find({ _id: req.user.hearts });
	res.render('stores', { title: 'Hearted Stores', stores});
};

exports.getTopStores = async (req, res) => {
	const stores = await Store.getTopStores();
	res.render('topStores', { title: 'Top Stores', stores})
};

exports.deleteStore = async (req, res) => {
	const store = await Store.findOne({ _id: req.params.id });
	confirmOwner(store, req.user);
	store.remove();
	req.flash('success', `Succesfully removed the store <strong>${store.name}</strong>.`);
	res.redirect('/');
};